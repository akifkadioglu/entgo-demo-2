// Code generated by ent, DO NOT EDIT.

package ogent

import (
	"context"
	"net/http"

	"github.com/akifkadioglu/entgo-demo-2/ent"
	"github.com/akifkadioglu/entgo-demo-2/ent/tableexample"
	"github.com/go-faster/jx"
)

// OgentHandler implements the ogen generated Handler interface and uses Ent as data layer.
type OgentHandler struct {
	client *ent.Client
}

// NewOgentHandler returns a new OgentHandler.
func NewOgentHandler(c *ent.Client) *OgentHandler { return &OgentHandler{c} }

// rawError renders err as json string.
func rawError(err error) jx.Raw {
	var e jx.Encoder
	e.Str(err.Error())
	return e.Bytes()
}

// CreateTableExample handles POST /table-examples requests.
func (h *OgentHandler) CreateTableExample(ctx context.Context, req *CreateTableExampleReq) (CreateTableExampleRes, error) {
	b := h.client.TableExample.Create()
	// Add all fields.
	b.SetField1(req.Field1)
	b.SetField2(req.Field2)
	// Add all edges.
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.TableExample.Query().Where(tableexample.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewTableExample(e), nil
}

// ReadTableExample handles GET /table-examples/{id} requests.
func (h *OgentHandler) ReadTableExample(ctx context.Context, params ReadTableExampleParams) (ReadTableExampleRes, error) {
	q := h.client.TableExample.Query().Where(tableexample.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewTableExample(e), nil
}

// UpdateTableExample handles PATCH /table-examples/{id} requests.
func (h *OgentHandler) UpdateTableExample(ctx context.Context, req *UpdateTableExampleReq, params UpdateTableExampleParams) (UpdateTableExampleRes, error) {
	b := h.client.TableExample.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Field1.Get(); ok {
		b.SetField1(v)
	}
	if v, ok := req.Field2.Get(); ok {
		b.SetField2(v)
	}
	// Add all edges.
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.TableExample.Query().Where(tableexample.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewTableExample(e), nil
}

// DeleteTableExample handles DELETE /table-examples/{id} requests.
func (h *OgentHandler) DeleteTableExample(ctx context.Context, params DeleteTableExampleParams) (DeleteTableExampleRes, error) {
	err := h.client.TableExample.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteTableExampleNoContent), nil

}

// ListTableExample handles GET /table-examples requests.
func (h *OgentHandler) ListTableExample(ctx context.Context, params ListTableExampleParams) (ListTableExampleRes, error) {
	q := h.client.TableExample.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewTableExamples(es)
	return (*ListTableExampleOKApplicationJSON)(&r), nil
}

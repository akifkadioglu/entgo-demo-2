// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/akifkadioglu/entgo-demo-2/ent/predicate"
	"github.com/akifkadioglu/entgo-demo-2/ent/schema"
	"github.com/akifkadioglu/entgo-demo-2/ent/tableexample"
)

// TableExampleUpdate is the builder for updating TableExample entities.
type TableExampleUpdate struct {
	config
	hooks    []Hook
	mutation *TableExampleMutation
}

// Where appends a list predicates to the TableExampleUpdate builder.
func (teu *TableExampleUpdate) Where(ps ...predicate.TableExample) *TableExampleUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetField1 sets the "field1" field.
func (teu *TableExampleUpdate) SetField1(ss schema.FieldStruct) *TableExampleUpdate {
	teu.mutation.SetField1(ss)
	return teu
}

// SetField2 sets the "field2" field.
func (teu *TableExampleUpdate) SetField2(ss []schema.FieldStruct) *TableExampleUpdate {
	teu.mutation.SetField2(ss)
	return teu
}

// AppendField2 appends ss to the "field2" field.
func (teu *TableExampleUpdate) AppendField2(ss []schema.FieldStruct) *TableExampleUpdate {
	teu.mutation.AppendField2(ss)
	return teu
}

// Mutation returns the TableExampleMutation object of the builder.
func (teu *TableExampleUpdate) Mutation() *TableExampleMutation {
	return teu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TableExampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TableExampleMutation](ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TableExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TableExampleUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TableExampleUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teu *TableExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tableexample.Table, tableexample.Columns, sqlgraph.NewFieldSpec(tableexample.FieldID, field.TypeInt))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.Field1(); ok {
		_spec.SetField(tableexample.FieldField1, field.TypeJSON, value)
	}
	if value, ok := teu.mutation.Field2(); ok {
		_spec.SetField(tableexample.FieldField2, field.TypeJSON, value)
	}
	if value, ok := teu.mutation.AppendedField2(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tableexample.FieldField2, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tableexample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TableExampleUpdateOne is the builder for updating a single TableExample entity.
type TableExampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TableExampleMutation
}

// SetField1 sets the "field1" field.
func (teuo *TableExampleUpdateOne) SetField1(ss schema.FieldStruct) *TableExampleUpdateOne {
	teuo.mutation.SetField1(ss)
	return teuo
}

// SetField2 sets the "field2" field.
func (teuo *TableExampleUpdateOne) SetField2(ss []schema.FieldStruct) *TableExampleUpdateOne {
	teuo.mutation.SetField2(ss)
	return teuo
}

// AppendField2 appends ss to the "field2" field.
func (teuo *TableExampleUpdateOne) AppendField2(ss []schema.FieldStruct) *TableExampleUpdateOne {
	teuo.mutation.AppendField2(ss)
	return teuo
}

// Mutation returns the TableExampleMutation object of the builder.
func (teuo *TableExampleUpdateOne) Mutation() *TableExampleMutation {
	return teuo.mutation
}

// Where appends a list predicates to the TableExampleUpdate builder.
func (teuo *TableExampleUpdateOne) Where(ps ...predicate.TableExample) *TableExampleUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TableExampleUpdateOne) Select(field string, fields ...string) *TableExampleUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TableExample entity.
func (teuo *TableExampleUpdateOne) Save(ctx context.Context) (*TableExample, error) {
	return withHooks[*TableExample, TableExampleMutation](ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TableExampleUpdateOne) SaveX(ctx context.Context) *TableExample {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TableExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TableExampleUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teuo *TableExampleUpdateOne) sqlSave(ctx context.Context) (_node *TableExample, err error) {
	_spec := sqlgraph.NewUpdateSpec(tableexample.Table, tableexample.Columns, sqlgraph.NewFieldSpec(tableexample.FieldID, field.TypeInt))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TableExample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tableexample.FieldID)
		for _, f := range fields {
			if !tableexample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tableexample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.Field1(); ok {
		_spec.SetField(tableexample.FieldField1, field.TypeJSON, value)
	}
	if value, ok := teuo.mutation.Field2(); ok {
		_spec.SetField(tableexample.FieldField2, field.TypeJSON, value)
	}
	if value, ok := teuo.mutation.AppendedField2(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tableexample.FieldField2, value)
		})
	}
	_node = &TableExample{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tableexample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
